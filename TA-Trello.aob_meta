{"validation": {"validators": ["best_practice_validation", "cim_mapping_validation", "field_extract_validation", "app_cert_validation"], "progress": 0.8064516129032258, "validation_id": "v_1498002591_18", "status": "job_started"}, "global_settings_builder": {"global_settings": {"log_settings": {}}}, "basic_builder": {"friendly_name": "Trello", "visible": true, "version": "1.0.0", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAADQUlEQVRYR72YW08TQRTHz+mTfgMvMVEj3jUo3hMf+BTGF40PPhoVBZUCpUBbLi0YngxP4ot8CwPxwqUo9yJ3YxQ/gfEFxszOTHdmZxfPtNRN03S355z57Tln/zOzCOro/zkAbPt+8RwRgDEA5Ff4F/M+xrFbNrHYG3hw4K4aCeDldyYGFuOq8YvX9OuVtHl4CBH6fwzA9pafmUAS/uspxgYR+r4FCyEYZJV2BKqADULfRjhQsExRZKrEO5E72CD0rotu9RpUttHjw6RKYd+6TKUyF3HYI6r/RqBxeWFya1aGWN0REtDo5h+4/nbTsB25tR9uHtxD8sdefkNmeyDkVjUgkVtWd5QU0IvVu2pkyc13zXqsEbIrUmD85549OUYHyq1oQAxK81U5QUDILosz71v+fFpFB8oui/5T3eByM9zXS7MSYQ7Us8R8RZaCXH/cAWhJ2oqgzMW3Z8kSYYTuRbup60/QgXq+GrasDF/R310FG6jhJB2oe9EEKsVXlUwALYQAnaIDdRXkBCw1rMHBt7vgjyPFE6FzXgBplOzZaQegBTNDZfiKkmXm7Aw9P0MH6pw3gUrx1eZEhMxsCNBZB6C5AFDpviJD6Rkb6MU5OlBm1gQqw1cCTWvCKBuz8TwdKD1jNHX+XhXU7NtL8kfuKyiKC0OE1JQmjFLc4tWkgF6s9LQfTS55WSPNH1NThkpzKoSOL9pcJpMVv0AH4kGtda8/N4X/p6/stPR4QO2Tdg81XaQDdXze2VaTk0hDQxjb8yFANXSg9kmjh0IdnVaMbRO2MDZfcgDKm7aOGQkOhJActzPUcpkO1DaxyyVLjoUAXXEAGv+HrdvWBKF11AZKXKUDJcfIthRDCWRuk1nrNYovTP/6DdWvlDBGbbc1VYjckuvCmPjIijLCMfiqL3mDBISJT+YTpj9NnkjKrZW/wvVlSY4VtEFo+RC9USRh7a4RQvP7ECB94xglIpWxQWgeUe9ctFuVECrtRk2VWWVsEJo4kLmV9l8EmfOMvt2ulA1C0/AgMHbH6oQyFbcYzyUOxoZE/8ffhfSRm6BFt7ZDnFSttuWMD78GtuW9VjNfDkUFDFtC2DOTXdowGxiCdO1t/s9fov+RQZ7uzOgAAAAASUVORK5CYII=", "author": "Ben Northway", "tab_build_no": "23", "large_icon": "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", "appname": "TA-Trello", "description": "", "build_no": 1, "tab_version": "2.1.2", "theme": "#297ba5"}, "data_input_builder": {"datainputs": [{"name": "trello_input", "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\n\ndef validate_input(helper, definition):\n    pass\n\ndef collect_events(helper, ew):\n    token = helper.get_arg('trello_token')\n    TRELLO_API_KEY = helper.get_arg('trello_key')\n    oldest_action  = helper.get_check_point('oldest_action')\n    newest_action  = helper.get_check_point('newest_action')\n    index = helper.get_output_index()\n    sourcetype = helper.get_sourcetype()\n    input_type = helper.get_input_type() + '://' + helper.get_arg('trello_token')\n\n    params = {'token': token, 'key': TRELLO_API_KEY}\n\n    r = helper.send_http_request('https://api.trello.com/1/members/me/boards',\n        'get', parameters=params, payload=None, headers=None, cookies=None, verify=True, cert=None,\n        timeout=None, use_proxy=True)\n    response_json = r.json()\n    boards = [r['shortLink'] for r in response_json]\n\n    helper.log_warning(\"looping through boards\")\n    for board_id in boards:\n\n        key = 'oldest_action_{}'.format(board_id)\n        helper.log_warning(\"getting checkpoint key: {}\".format(key))\n        oldest_action = helper.get_check_point(key)\n        helper.log_warning(\"got checkpoint value: {}\".format(oldest_action))\n\n        if oldest_action is None:\n            helper.log_warning(\"first run - no oldest action\")\n            params.pop('since', None)\n            while True:\n                url = 'https://api.trello.com/1/boards/{board_id}/actions'.format(board_id=board_id)\n                helper.log_warning(\"requesting: {}\".format(url))\n                helper.log_warning(\"requesting params: {}\".format(params))\n                r = helper.send_http_request(url,\n                    'get', parameters=params, payload=None, headers=None, cookies=None, verify=True, cert=None,\n                    timeout=None, use_proxy=True)\n                response_json = r.json()\n                if len(response_json) == 0:\n                    helper.log_warning(\"response was 0 length\")\n                    break\n                else:\n                    for data in response_json:\n                        helper.log_warning(\"saving event\")\n                        event = helper.new_event(source=input_type, index=index, sourcetype=sourcetype, data=json.dumps(data))\n                        ew.write_event(event)\n                    key = 'oldest_action_{}'.format(board_id)\n                    helper.log_warning(\"saving oldest checkpoint key: {}\".format(key))\n                    oldest_action = sorted([a['date'] for a in response_json])[0]\n                    helper.save_check_point(key, oldest_action)\n                    params.update({'before': oldest_action})\n\n                    key = 'newest_action_{}'.format(board_id)\n                    if helper.get_check_point(key) is None:\n                        helper.log_warning(\"no newest action, saving checkpoint for key: {}\".format(key))\n                        helper.save_check_point(key, sorted([a['date'] for a in response_json])[-1])\n\n        else:\n            helper.log_warning('not first run')\n            # get new actions since last import\n            key = 'newest_action_{}'.format(board_id)\n            newest_checkpoint = helper.get_check_point(key)\n            helper.log_warning('newest checkpoint value: {}'.format(newest_checkpoint))\n            if newest_checkpoint is None:\n                raise Exception(\"didn't expect this\")\n            params.update({'since': newest_checkpoint})\n            params.pop('before', None)\n            url = 'https://api.trello.com/1/boards/{board_id}/actions'.format(board_id=board_id)\n            helper.log_warning(\"requesting: {}\".format(url))\n            helper.log_warning(\"requesting params: {}\".format(params))\n            r = helper.send_http_request(url,\n                'get', parameters=params, payload=None, headers=None, cookies=None, verify=True, cert=None,\n                timeout=None, use_proxy=True)\n            response_json = r.json()\n            helper.log_warning('json next')\n            helper.log_warning(response_json)\n            for data in response_json:\n                helper.log_warning('got data')\n                event = helper.new_event(source=input_type, index=index, sourcetype=sourcetype, data=json.dumps(data))\n                ew.write_event(event)\n            if len(response_json):\n                key = 'newest_action_{}'.format(board_id)\n                helper.log_warning('saving checkpoint for key: {}'.format(key))\n                newest_action = sorted([a['date'] for a in response_json])[-1]\n                helper.save_check_point(key, newest_action)\n", "index": "default", "data_inputs_options": [{"name": "trello_key", "type": "customized_var", "placeholder": "", "description": "Get your key here: https://trello.com/app-key\n", "default_value": "", "title": "Trello Key", "required_on_edit": false, "required_on_create": true, "format_type": "text"}, {"name": "trello_token", "type": "customized_var", "placeholder": "", "description": "Keep it secret. Keep it safe. Get your token here: https://trello.com/1/authorize?expiration=never&scope=read,write,account&response_type=token&name=Server%20Token&key=YOURKEY", "default_value": "", "title": "Trello Token", "required_on_edit": false, "required_on_create": true, "format_type": "password"}], "title": "Trello Input", "parameters": [{"label": "Trello Key", "type": "text", "placeholder": "", "default_value": "", "value": "", "required": true, "name": "trello_key", "format_type": "text", "help_string": "Get your key here: https://trello.com/app-key\n"}, {"label": "Trello Token", "type": "password", "placeholder": "", "default_value": "", "value": "", "required": true, "name": "trello_token", "format_type": "password", "help_string": "Keep it secret. Keep it safe. Get your token here: https://trello.com/1/authorize?expiration=never&scope=read,write,account&response_type=token&name=Server%20Token&key=YOURKEY"}], "use_external_validation": true, "interval": "30", "type": "customized", "streaming_mode_xml": true, "sourcetype": "trello:json", "description": "", "uuid": "a06d057c07714e999d5eb6b30ebab090", "customized_options": [{"name": "trello_key", "value": ""}, {"name": "trello_token", "value": ""}]}]}, "sourcetype_builder": {"trello:json": {"metadata": {"extractions_count": 0, "data_input_name": "trello_input", "cims_count": 0, "event_count": 0}, "conf_data": {"SHOULD_LINEMERGE": "0", "category": "Splunk App Add-on Builder", "pulldown_type": "1"}}, "trello_json": {"metadata": {"extractions_count": 0, "data_input_name": null, "cims_count": 0, "event_count": 0}, "conf_data": {"SHOULD_LINEMERGE": "0", "category": "Splunk App Add-on Builder", "pulldown_type": "1"}}}}